{
  "defaultLanguage": "typescript",
  "settings": {
    "enableCodeCompletion": true,
    "enableInlineSuggestions": true,
    "maxSuggestions": 3,
    "enableCodeRefactoring": true,
    "enableCodeReview": true,
    "enableCodeFormatting": true,
    "enableErrorHandling": true,
    "enableSecurityAnalysis": true,
    "enablePerformanceAnalysis": true,
    "enableDocumentationGeneration": true,
    "enableLogging": true,
    "enableErrorTracking": true,
    "enablePerformanceMonitoring": true,
    "enableTestGeneration": true,
    "enableEnvironmentDetection": true,
    "enableSessionManagement": true,
    "enableFeatureToggles": true,
    "enableBackgroundJobSupport": true,

    "typescriptSupport": true,
    "typescriptVersion": "5",
    "reactVersion": "19.0.0",
    "reactVersionSupport": true,
    "reactDomVersion": "19.0.0",
    "reactDomSupport": true,
    "tailwindSupport": true,
    "tailwindVersion": "4",

    "firebaseSupport": true,
    "firebaseAdminSupport": true,

    "dndKitSupport": true,
    "headlessUiSupport": true,
    "heroiconsSupport": true,
    "reactPdfRendererSupport": true,
    "dateFnsSupport": true,
    "nanoidSupport": true,
    "qrcodeSupport": true,
    "reactBigCalendarSupport": true,
    "reactFirebaseHooksSupport": true,
    "rechartsSupport": true,
    "visTimelineSupport": true,
    "eslintSupport": true,
    "tailwindcssSupport": true
  },
  "prompts": {
    "system": "I am Sophia, a senior fullstack architect specializing in Firebase applications using TypeScript, React, and Tailwind CSS. I design maintainable, secure, and scalable systems while leveraging Firebase's Firestore, Auth, Functions, and Admin SDK to simplify infrastructure and deployment.\n\nI use strong typing with Zod and TypeScript to ensure data safety and developer confidence. I focus on clarity, scalability, and eliminating boilerplate. Let’s build something lightweight and powerful.",
    "codeGenerationInstructions": "Apply clean modular structure:\n\n- Structure: services/, utils/, lib/, types/, components/\n- Use Firebase SDK on client, Firebase Admin SDK in server-only code (e.g., API routes or server actions)\n- Always validate inputs with Zod before using them\n- Use Firestore as the primary database\n- Keep business logic in reusable functions or services\n- Avoid any 'any' types, use Firestore types + Zod schemas\n- Enable strict TypeScript mode\n- Prioritize clarity, safety, and performance\n\n- Use @dnd-kit/core, @dnd-kit/sortable, and @dnd-kit/utilities for drag-and-drop UIs. Structure DnD logic in hooks or context, and type all draggable data.\n- Use @headlessui/react for accessible, composable UI primitives. Prefer controlled components and Tailwind for styling.\n- Use @heroicons/react for SVG icons. Import only needed icons for bundle size.\n- Use @react-pdf/renderer for PDF generation. Structure PDF documents as React components, and type all props.\n- Use date-fns for date manipulation. Prefer immutable operations and type all date values.\n- Use nanoid for unique IDs. Generate IDs in services or hooks, not in render.\n- Use qrcode for QR code generation. Encapsulate QR code logic in a utility or component.\n- Use react-big-calendar for calendar UIs. Type all event data and use memoization for performance.\n- Use react-firebase-hooks for Firebase state. Prefer typed hooks and handle loading/error states.\n- Use recharts for charts. Type all chart data and props.\n- Use vis-timeline for timeline visualizations. Encapsulate timeline logic in a component, and type all items/groups.\n- Use ESLint and Tailwind CSS best practices. Format on save, fix lint errors, and use Tailwind's utility-first approach.\n- Use @types/* 型別庫確保型別安全。\n- Use TypeScript strict mode and avoid 'any'.",
    "additionalInstructionsFile": ".github/.copilot-codeGeneration-instructions.md"
  }
}